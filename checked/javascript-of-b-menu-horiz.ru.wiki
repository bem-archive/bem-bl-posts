==JavaScript реализация горизонтального меню

=== JavaScript блока b-menu-horiz

JavaScript реализация блока b-menu-horiz обеспечивает следующее поведение:
 * при клике на определённую область (блок) содержащий этот блок пункт меню становится
активным, то есть приобретает модификатор ##{ state : 'current' }##.
 * факт изменения активного пункта меню отражается на уровне событий, чтобы на
этот факт можно было реагироать.

Точно такая же функциональность нужна и для вертикального меню. Поэтому она
реализована в блоке-хелпере ##i-menu## (абстрактное меню).

Для начала рекомендуется ознакомиться с базовыми понятиями JavaScript-реализации
в библиотеке bem-bl: ((http://bem.github.com/bem-bl/sets/common-desktop/i-bem/i-bem.ru.html bem.github.com/.../i-bem.ru.html)).

JavaScript-реализация блока ##b-menu-horiz## в этом случае сводится к декларации
блока с указанием базы:

%%hl js
BEM.DOM.decl({ name: 'b-menu-horiz', baseBlock: 'i-menu' }, {});
%%

Такая запись означает, что все методы и свойства JavaScript-объекта блока
будут унаследованы от ##i-menu##.

=== JavaScript блока i-menu

Блок ##i-menu## задекларирован как блок, имеющий DOM-представление:

%%hl js
BEM.DOM.decl('i-menu',
...
)
%%

У блока есть динамические и статические методы и свойства.

Наличие статического метода ##live## блока означает, что bem-объект (JavaScript
объект в памяти браузера) создаётся не сразу при общей инициализации блоков
на странице, а при возникновении определённых условий.

%%hl js
live : function() {
    this.liveBindTo('item-selector', 'leftclick', function(e) {
        this.onItemSelectorClick(e);
    });
}
%%

В теле метода использован метод ##liveBindTo##, позволяющий инициализировать
блок при возникновении события. В данном случае - при возникновении события
##leftclick## на любом из элементов ##item-selector## блока.\\
Использование события ##leftclick## (вместо ##click##) позволяет реагировать
только на клик левой кнопкой мыши. Такая возможность предоставляется
специалиным плагином для jQuery, реализованным в элементе
##((https://github.com/bem/bem-bl/blob/master/blocks-common/i-jquery/__leftclick/i-jquery__leftclick.js i-jquery__leftclick))##.\\
Callback-функция, переданная в метод, будет исполняться при каждом клике.

Метод ##onItemSelectorClick## относится к конкретному инстансу блока и,
соответственно, реализован как динамический метод блока:

%%hl js
onItemSelectorClick : function(e) {

    var item = this._getItemByEvent(e);
    this.setMod(item, 'state', 'current');

},
%%

В результате работы этого метода соответствующий пункт меню приобретает модификатор
##{ state : 'current' }##.

Для вычисления соответствующего пункта меню используется метод ##_getItemByEvent##:

%%hl js
_getItemByEvent : function(e) {
    return e.data.domElem.closest(this.buildSelector('item'));
}
%%

Поскольку клик случается не на элементе ##item##, его нужно вычислять относительно элемента,
на котором возникло событие.\\
Необходимость слушать событие не на элементе ##item##, а на содержащемся в нём элементе ##item-selector##
продиктована тем, что элемент ##item## чаще всего больше, чем область, которая должна реагировать на
клик. Кроме того, использование специального элемента для реакции на клик позволяет при необходимости
сделать так, что эта реакция будет лишь у одного из блоков, содержащихся в пункте меню.

При переключении какого-либо пункта меню в активное состояние на bem-объекте блока возникает событие
##trigger##. Код, обеспечивающий это, записан в декларативном стиле в свойстве ##onElemSetMod##
блока:

%%hl js
onElemSetMod : {

    'item' : {

        'state': {

            'current' : function(elem, modName, modVal, oldModVal) {

                if (oldModVal == 'disabled') return false;

                var prev = this.elem('item', 'state', 'current');
                this
                    .delMod(prev, 'state')
                    .trigger('current', {
                        prev    : prev,
                        current : elem
                    });
            }
        }
    }
}
%%

Эта функция исполняется при любой попытке приобретения элементом ##item## модификатора
##state## в значении ##current## (не только при клике). Например, если существует какой-то
другой блок, который в ходе своей работы меняет текущий пункт меню, функция исполнится.

Функция возвращает ##false## в том случае, если данный элемент находится в состоянии ##disabled##
(это тоже значение модификатора ##state##). Возвращение функцией значения ##false## отменяет установку
модификатора. То есть неактивный пункт меню не может стать выделенным.

В результате работы функции при каждом переключении активного пункта меню на блоке возникает
событие ##trigger## с данными о предыдущем и текущем активном пункте меню. Это событие
может слушать другой блок, и по факту возникновения этого события выполнять какие-либо
действия.\\
Например, при клике на пункты меню можно загружать информацию по AJAX и менять контент
в другой части страницы.

Дополнительная информация по JavaScript-реализациям в библиотеке bem-bl:
 * ((http://clubs.ya.ru/bem/replies.xml?item_no=1154 Мастер-класс "JavaScript в БЭМ-терминах" на YAC2011))
 * ((http://clubs.ya.ru/bem/replies.xml?item_no=900 Доклад "i-bem.js - блок, помогающий делать другие блоки"))
