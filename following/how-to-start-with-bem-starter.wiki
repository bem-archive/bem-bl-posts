== Быстро создание БЭМ-проекта
Я хочу показать, как быстро создать проект, используя полный стек БЭМ.

=== Что такое БЭМ?
Для начала небольшое лирическое отступление для тех, кто не в курсе,
что обозначает эта аббревиатура.\\
БЭМ расшифровывается как "Блок, Элемент, Модификатор". Это методология
разработки web-проектов, способ удобно делить интерфейс на отдельные штучки,
применимый для любой технологии. Кроме того, БЭМ -- это набор инструментов для
автоматизации работы. И наконец, БЭМ -- это возможность создания интерфейсных
библиотек для быстрой и эффективной разработки.

Если ранее вы не сталкивались с БЭМ, вам стоит вначале просмотреть материалы
сайта ((http://bem.info/ bem.info)), а затем вернуться к этой статье.\\
Для тех, кому больше нравится видео, могу предложить
((https://vimeo.com/53219242 запись доклада с WebConf Riga 2012)) (на
английском) или ((http://my.comdi.com/event_export/_rec/rit/01/?room=2&rec=25
выступление Сергея Бережного (@veged) на РИТ 2011)).

=== Необходимые инструменты
Для того, чтобы пройти по всем шагам этого мануала, вам нужно установить
((https://github.com/bem/bem-tools bem tools)). Это набор инструментов с
command line интерфейсом для оперирования БЭМ-сущностями и сборки проекта.
Инструкция по установке есть в описании репозитория.

Я буду использовать команду ##bem create## для создания файлов технологий. Кроме
того, вы увидите, как работает ##bem server## -- сборщик странц на лету.

=== Болванки для создания проекта
Создание БЭМ-проекта можно начинать с копирования специальных репозиториев, где
всё настроено для использования bem tools.

==== Как устроен project-stub
Один из таких репозиториев -- ((https://github.com/bem/project-stub
project-stub))*1. Это минимальная конфигурация для использования БЭМ-сборки.

В проекте есть файл ##packadge.json##, подтягивающий необходимые для проекта
npm-пакеты. В нашем случае это пакет ##bem## для локального использования.

Директория ##.bem## используется для хранения конфигураций уровня
переопределения.\\
По БЭМ уровни переопределения -- это сам проект, директории с блоками и
дирректории с бандлами (страницами)).

===== Конфигурация проекта
Для уровня проекта необходим конфигурирующий файл
##((https://github.com/bem/project-stub/blob/master/.bem/make.js make.js))##.
Он сообщает командам ##bem make## и ##bem sever## информацию о том, как собирать
проект.
В этом примере задаются директории блоков и бандлов, при помощи RegExp-based
синтаксиса, устанавливаются необходимые библиотеки и перечисляются технологии,
которые необходимо собирать на уровнях бандлов.

===== Используемые библиотеки
На данный момент проект использует 2 библиотеки:
  * ((https://github.com/bem/bemhtml bemhtml))\\
    В библиотеке есть один блок, подключение которого позволяет любому проекту
    использовать шаблонизатор BEMHTML.
 * ((https://github.com/bem/bem-bl bem-bl))\\
   Библиотека простых блоков.

В проекте есть 3 уровня переопределения: 2 для блоков и один для бандлов
(страниц).

===== Уровни переопределения
Уровни для блоков называются
((https://github.com/bem/project-stub/tree/master/common.blocks common.blocks))
и ((https://github.com/bem/project-stub/tree/master/desktop.blocks
desktop.blocks)).\\
Настройки уроней находятся в файлах ##.bem/level.js##. Для этих уровней они
одинаковые, наследуются от одного и того же описания уровня
((https://github.com/bem/project-stub/blob/master/.bem/levels/blocks.js
/.bem/levels/blocks.js)) и ничего не переопределяют. Список используемых блоками
технологий в проекте ##project-stub## обнулён, на базе этого проекта может быть
построен любой с любыми технологиями.

На уровне ##common.blocks## находится лишь один блок, описывающий зависимости в
технологии
((https://github.com/bem/project-stub/blob/master/common.blocks/i-bem/__dom/i-bem__dom.deps.js
deps.js)):

%%hl js
({
  mustDeps: { block: 'bemhtml' },
  noDeps: { block: 'i-bem', elems: 'html' }
})
%%

Такая зависимость позволяет подключить ко всем страницам шаблонизатор
##BEMHTML##. Он нужен для любой версии сайта, поэтому находится на уровне
##common.blocks##.\\
Директива ##noDeps## исключает подключение шаблонизатора из библиотеки ##bem-bl##.
Это временная мера на период, пока шаблонизатор переезжает в отдельную библиотеку,
но сохраняется обратная совместимость.

На уровне ##desktop.blocks## определён блок
((https://github.com/bem/project-stub/tree/master/desktop.blocks/b-page
b-page)). Его зависимости обеспечивают подключение кода, который инициализирует
JavaScript всех блоков по domReady:

%%hl js
({
    mustDeps: [
        {
            block: 'i-bem',
            elem: 'dom',
            mods: { init: 'auto' }
        },
        { block: 'bemhtml' }
    ],
    noDeps: [
        {
            block: 'i-bem',
            elem: 'html'
        }
    ]
})
%%

Уровень переопределения ##desktop.bundles## содержит входные данные для страниц
и настройки сборки.\\
Как и все настройки уровня, конфигурация сборки содержится в ((https://github.com/bem/project-stub/blob/master/desktop.bundles/.bem/level.js
файле .bem/level.js)) уровня. Там прописано наследование от общго файла
для бандлов ((https://github.com/bem/project-stub/blob/master/.bem/levels/bundles.js /.bem/levels/bundles.js))
и собственные доопределения.

===== Настройки сборки
В общем конфигурационном файле про бандлы ((https://github.com/bem/project-stub/blob/master/.bem/levels/bundles.js
/.bem/levels/bundles.js)) указано, по каким шаблонам собирать различные технологии.

==== Как устроен full-stack-start
Репозиторий ((https://github.com/bem/full-stack-starter full-stack-starter))
имеет такую же архитектуру, но немного расширен для использования полного стека
БЭМ.

---------------------
*1. Репозиторий описан в ревизии
((https://github.com/bem/project-stub/commit/7c0868f2df728e8f63ef749a46e111762cb68d09 7c0868f2df))
